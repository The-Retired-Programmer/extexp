/*
 * Copyright 2018 richard.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.extexp.visualeditor;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.function.Function;
import javax.json.JsonObject;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import uk.theretiredprogrammer.extexp.support.ExecutionEnvironment;
import uk.theretiredprogrammer.extexp.support.PScene;
import uk.theretiredprogrammer.extexp.visualeditor.palette.PaletteSupport;

@ConvertAsProperties(
        dtd = "-//uk.theretiredprogrammer.extexp.visualeditor//VE//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VisualEditorTC",
        iconBase = "uk/theretiredprogrammer/extexp/visualeditor/zoom.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@ActionID(category = "Window", id = "uk.theretiredprogrammer.extexp.visualeditor.VisualEditorTC")
@Messages({
    "CTL_VETopComponent=Build Editor",
    "HINT_VETopComponent=This is a Build Editor window"
})
public final class PTC extends TopComponent {
    
    private final SerialiseBuildInstructions serialiser = new SerialiseBuildInstructions();
    private final JPanel contentpanel = new JPanel();
    
    public PTC() {
        initComponents();
        setName(Bundle.CTL_VETopComponent());
        setToolTipText(Bundle.HINT_VETopComponent());
        JScrollPane scrollpane = new JScrollPane();
        contentpanel.setLayout(new BoxLayout(contentpanel, BoxLayout.LINE_AXIS));
        scrollpane.setViewportView(contentpanel);
        setLayout(new BorderLayout());
        add(scrollpane, BorderLayout.CENTER);
        //add(scene.createSatelliteView(), BorderLayout.WEST);
        associateLookup(Lookups.singleton(PaletteSupport.createPalette()));
    }
    
//    public void setSaveSource(Function<JsonObject, Boolean> savesource) {
//        serialiser.setOutputFunction(savesource);
//    }
    
    public void deserialise(ExecutionEnvironment env) throws IOException {
        for (int i = 0; i < env.commandsequences.getNamedSequences().size(); i++) {
            PScene scene = new PScene();
            contentpanel.add(scene.createView());
            serialiser.deserialize(scene, env, i);
            scene.layout();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    @Override
    public void componentActivated() {
        contentpanel.requestFocusInWindow();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
