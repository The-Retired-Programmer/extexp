/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.theretiredprogrammer.extexp.visualeditor;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.function.Function;
import javax.json.JsonObject;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import uk.theretiredprogrammer.extexp.execution.ExecutionEnvironment;
import uk.theretiredprogrammer.extexp.visualeditor.palette.PaletteSupport;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//uk.theretiredprogrammer.extexp.visualeditor//VE//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VisualEditorTC",
        iconBase = "uk/theretiredprogrammer/extexp/visualeditor/zoom.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@ActionID(category = "Window", id = "uk.theretiredprogrammer.extexp.visualeditor.VisualEditorTC")
@Messages({
    "CTL_VETopComponent=Build Editor",
    "HINT_VETopComponent=This is a Build Editor window"
})
public final class VisualEditorTC extends TopComponent {
    
    private final ExtexpScene scene;
    private final ExtexpSceneSerialise serialiser = new ExtexpSceneSerialise();
    
    public VisualEditorTC() {
        initComponents();
        setName(Bundle.CTL_VETopComponent());
        setToolTipText(Bundle.HINT_VETopComponent());
        JScrollPane scrollpane = new JScrollPane();
        scene = new ExtexpScene();
        scrollpane.setViewportView(scene.createView());
        setLayout(new BorderLayout());
        add(scrollpane, BorderLayout.CENTER);
        add(scene.createSatelliteView(), BorderLayout.WEST);
        associateLookup(Lookups.singleton(PaletteSupport.createPalette()));
    }
    
    
    public void setSaveSource(Function<JsonObject, Boolean> savesource) {
        serialiser.setOutputFunction(savesource);
    }
    
    public void deserialise(ExecutionEnvironment env) throws IOException {
        serialiser.deserialize(scene,env);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    @Override
    public void componentActivated() {
        scene.getView().requestFocusInWindow();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
