/*
 * Copyright 2019 richard.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.extexp.external;

import uk.theretiredprogrammer.extexp.external.MarkDownOptionsPanelController;
import java.io.File;
import javax.swing.JFileChooser;
import org.openide.util.NbPreferences;

final class MarkDownPanel extends javax.swing.JPanel {

    private final MarkDownOptionsPanelController controller;

    MarkDownPanel(MarkDownOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        kramdownPath = new javax.swing.JTextField();
        browse = new javax.swing.JToggleButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MarkDownPanel.class, "MarkDownPanel.jLabel1.text")); // NOI18N

        kramdownPath.setText(org.openide.util.NbBundle.getMessage(MarkDownPanel.class, "MarkDownPanel.kramdownPath.text")); // NOI18N
        kramdownPath.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                kramdownPathPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(browse, org.openide.util.NbBundle.getMessage(MarkDownPanel.class, "MarkDownPanel.browse.text")); // NOI18N
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(kramdownPath, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(browse)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(kramdownPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void kramdownPathPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kramdownPathPropertyChange
        controller.changed();
    }//GEN-LAST:event_kramdownPathPropertyChange

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            kramdownPath.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_browseActionPerformed

    void load() {
        kramdownPath.setText(NbPreferences.forModule(MarkDownPanel.class).get("kramdownPath", "kramdown"));
    }

    void store() {
        if (valid()) {
            NbPreferences.forModule(MarkDownPanel.class).put("kramdownPath", kramdownPath.getText());
        }
    }

    boolean valid() {
        return new File(kramdownPath.getText()).canExecute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton browse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField kramdownPath;
    // End of variables declaration//GEN-END:variables
}
